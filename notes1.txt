terraform {
  backend "s3" {
    bucket         = "circles-blog-terraform"
    region         = "eu-central-1"
    key            = "circles-blog-terraform.tfstate"
    dynamodb_table = "circles-blog-terraform"
    encrypt        = true
  }
}

# AWS
provider "aws" {
  access_key = "${var.access_key}"
  secret_key = "${var.secret_key}"
  region     = "${var.aws_region}"
}

locals {
  availability_zones = ["${var.aws_region}a", "${var.aws_region}b"]
}

module "networking" {
  source               = "./modules/networking"
  project_prefix       = "${var.project_prefix}"
  environment          = "${var.environment}"
  vpc_id               = "${var.circles_backend_vpc_id}"
  igw_id               = "${var.circles_backend_igw_id}"
  public_subnets_cidr  = ["10.0.5.0/24", "10.0.6.0/24"]
  private_subnets_cidr = ["10.0.50.0/24", "10.0.60.0/24"]
  region               = "${var.aws_region}"
  availability_zones   = "${local.availability_zones}"
}

module "alb" {
  source              = "terraform-aws-modules/alb/aws"
  version             = "3.4.0"
  load_balancer_name  = "${var.project_prefix}-alb"
  security_groups     = ["${aws_security_group.circles_blog_alb_sg.id}"]
  subnets             = ["${module.networking.private_subnets_id}"]
  vpc_id               = "${var.circles_backend_vpc_id}"
}


module "autoscaling" {
  source  = "terraform-aws-modules/autoscaling/aws"
  version = "2.8.0"
  name                  = "${var.project_prefix}-asg"
  # launch_configuration  = "${aws_launch_configuration.circles_blog.name}"
  # availability_zones    = "${local.availability_zones}"
  desired_capacity      = 2
  min_size              = 2
  max_size              = 4
  # enabled_metrics       = ["GroupMinSize", "GroupMaxSize", "GroupDesiredCapacity", "GroupInServiceInstances", "GroupTotalInstances"]
  # metrics_granularity   = "1Minute"
  # load_balancers        = ["${aws_alb.circles_blog.id}"]
  target_group_arns     = "${module.alb.target_group_arns}"
  health_check_type     = "ELB"
  vpc_zone_identifier   = ["${module.networking.private_subnets_id}"]
}

# module "asg" {
#   source = "terraform-aws-modules/autoscaling/aws"

#   name = "${var.project_prefix}-asg-service"

#   # Launch configuration
#   launch_configuration  = "${aws_launch_configuration.circles_blog.name}"

#   # Auto scaling group
#   asg_name                  = "${var.project_prefix}-asg"
#   vpc_zone_identifier       = ["${module.networking.private_subnets_id}"]
#   health_check_type         = "EC2"
#   min_size                  = 1
#   max_size                  = 4
#   desired_capacity          = 2
#   wait_for_capacity_timeout = 0

#   tags = [
#     {
#       key = "Name"
#       value = "${var.project_prefix}-asg"
#       propagate_at_launch = true
#     },
#     {
#       key = "Environment"
#       value = "dev"
#       propagate_at_launch = true
#     }
#   ]
# }



data "template_file" "cloudwatch_config_blog" {
  template = "${file("cloudwatch.json")}"

  vars {
    log_group_name  = "${var.project_prefix}-logs"
    log_stream_name = "circles-blog"
  }
}

data "template_file" "blog_cloud_config" {
  template = "${file("blog_cloud-config.yml")}"

  vars {
    cloudwatch_json = "${data.template_file.cloudwatch_config_blog.rendered}"
    smtp_host       = "${var.smtp_host}"
    smtp_username   = "${var.smtp_username}"
    smtp_password   = "${var.smtp_password}"
  }
}


resource "aws_key_pair" "circles_blog" {
  key_name   = "blog-key"
  public_key = "${file("ssh/insecure-deployer.pub")}"
}

# resource "aws_launch_configuration" "circles_blog" {
#   name_prefix     = "${var.project_prefix}-"
#   image_id        = "ami-7c4f7097"
#   instance_type   = "t2.micro"
#   security_groups = ["${aws_security_group.circles_blog_sg.id}"]
#   # security_groups = ["${module.networking.security_groups_ids}"]
#   key_name        = "${aws_key_pair.circles_blog.key_name}"
#   user_data       = "${data.template_file.blog_cloud_config.rendered}"
#   associate_public_ip_address = true

#   lifecycle {
#     create_before_destroy = true
#   } 
# }

# resource "aws_autoscaling_group" "circles_blog" {
#   name                  = "${var.project_prefix}-asg"
#   launch_configuration  = "${aws_launch_configuration.circles_blog.name}"
#   availability_zones    = "${local.availability_zones}"
#   min_size              = 2
#   max_size              = 4
#   enabled_metrics       = ["GroupMinSize", "GroupMaxSize", "GroupDesiredCapacity", "GroupInServiceInstances", "GroupTotalInstances"]
#   metrics_granularity   = "1Minute"
#   load_balancers        = ["${aws_alb.circles_blog.id}"]
#   health_check_type     = "ELB"
#   vpc_zone_identifier   = ["${module.networking.private_subnets_id}"]

#   tag {
#     key = "Name"
#     value = "${var.project_prefix}-asg"
#     propagate_at_launch = true
#   }

#   tag {
#     key = "Environment"
#     value = "dev"
#     propagate_at_launch = true
#   }

#   lifecycle {
#     create_before_destroy = true
#   }
# }

# resource "aws_autoscaling_policy" "circles_blog_up" {
#   name = "${var.project_prefix}-asg-policy"
#   scaling_adjustment = 1
#   adjustment_type = "ChangeInCapacity"
#   cooldown = 300
#   autoscaling_group_name = "${aws_autoscaling_group.circles_blog.name}"
# }

# resource "aws_cloudwatch_log_group" "blog" {
#   name              = "${var.project_prefix}-logs"
#   retention_in_days = "60"

#   tags {
#     Environment = "dev"
#   }
# }

# resource "aws_cloudwatch_metric_alarm" "cpu_up" {
#   alarm_name = "${var.project_prefix}-cpu-up"
#   comparison_operator = "GreaterThanOrEqualToThreshold"
#   evaluation_periods = "2"
#   metric_name = "CPUUtilization"
#   namespace = "AWS/EC2"
#   period = "120"
#   statistic = "Average"
#   threshold = "75"

#   dimensions {
#     AutoScalingGroupName = "${aws_autoscaling_group.circles_blog.name}"
#   }

#   alarm_description = "Circles Blog CPU usage exceeds 60%"
#   alarm_actions = ["${aws_autoscaling_policy.circles_blog_up.arn}"]
# }

# resource "aws_autoscaling_policy" "circles_blog_down" {
#   name = "${var.project_prefix}-asg-policy-down"
#   scaling_adjustment = -1
#   adjustment_type = "ChangeInCapacity"
#   cooldown = 300
#   autoscaling_group_name = "${aws_autoscaling_group.circles_blog.name}"
# }

# resource "aws_cloudwatch_metric_alarm" "cpu_down" {
#   alarm_name = "${var.project_prefix}-cpu-down"
#   comparison_operator = "LessThanOrEqualToThreshold"
#   evaluation_periods = "2"
#   metric_name = "CPUUtilization"
#   namespace = "AWS/EC2"
#   period = "120"
#   statistic = "Average"
#   threshold = "10"

#   dimensions {
#     AutoScalingGroupName = "${aws_autoscaling_group.circles_blog.name}"
#   }

#   alarm_description = "Circles Blog CPU usage below 10%"
#   alarm_actions = ["${aws_autoscaling_policy.circles_blog_down.arn}"]
# }

resource "aws_security_group" "circles_blog_sg" {
  name    = "${var.project_prefix}-sg"
  vpc_id  = "${var.circles_backend_vpc_id}"
  
  ingress {
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 22
    to_port     = 22
    cidr_blocks = ["0.0.0.0/0"]
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_security_group_rule" "ssh" {
  security_group_id = "${aws_security_group.circles_blog_sg.id}"
  type = "ingress"
  from_port = 22
  to_port = 22
  protocol = "tcp"
  cidr_blocks = ["0.0.0.0/32"]
}

resource "aws_security_group" "circles_blog_alb_sg" {
  name = "${var.project_prefix}-alb-sg"
  description = "controls access to the application ALB"
  vpc_id  = "${var.circles_backend_vpc_id}"  

  ingress {
    protocol    = "tcp"
    from_port   = 80
    to_port     = 80
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 443
    to_port     = 443
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port = 0
    to_port   = 0
    protocol  = "-1"

    cidr_blocks = [
      "0.0.0.0/0",
    ]
  }

  tags {
    Name        = "${var.project_prefix}-lb-sg"
    Environment = "${var.environment}"
  }
}

# resource "aws_alb" "circles_blog" {
#   name                = "${var.project_prefix}-alb"
#   internal            = false
#   load_balancer_type  = "application"
#   security_groups     = ["${aws_security_group.circles_blog_alb_sg.id}"]
#   # security_groups   = ["${module.networking.security_groups_ids}"]  
#   subnets             = ["${module.networking.private_subnets_id}"]
  
#   # access_logs {
#   #   bucket = "alb-access-logs"
#   #   region = "${var.aws_region}"
#   #   bucket_prefix = "${var.project_prefix}"
#   #   interval = 5
#   # }

#   # listener {
#   #   instance_port = 80
#   #   instance_protocol = "http"
#   #   lb_port = 80
#   #   lb_protocol = "http"
#   # }

#   # health_check {
#   #   healthy_threshold = 2
#   #   unhealthy_threshold = 2
#   #   timeout = 30
#   #   target = "HTTP:80/"
#   #   interval = 60
#   # }

#   # idle_timeout = 400
#   # connection_draining = true
#   # connection_draining_timeout = 400

#   tags {
#     Name = "${var.project_prefix}-alb"
#     Environment = "${var.environment}"
#   }
# }

# # resource "aws_lb_cookie_stickiness_policy" "circles_blog" {
# #   name = "${var.project_prefix}-cookiestickness"
# #   load_balancer = "${aws_alb.circles_blog.id}"
# #   lb_port = 80
# #   cookie_expiration_period = 600
# # }


# ## IAM

# resource "aws_iam_instance_profile" "circles_blog" {
#   name = "${var.project_prefix}-instance-profile"
#   role = "${aws_iam_role.instance.name}"
# }

# resource "aws_iam_role" "instance" {
#   name = "${var.project_prefix}-instance-role"

#   assume_role_policy = <<EOF
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Sid": "",
#       "Effect": "Allow",
#       "Principal": {
#         "Service": "ec2.amazonaws.com"
#       },
#       "Action": "sts:AssumeRole"
#     }
#   ]
# }
# EOF
# }

# data "template_file" "instance_profile" {
#   template = "${file("${path.module}/instance-profile-policy.json")}"

#   vars {
#     app_log_group_arn = "${aws_cloudwatch_log_group.blog.arn}"
#     net_log_group_arn = "${module.networking.log_group_arn}"
#     region            = "${var.aws_region}"
#   }
# }

# resource "aws_iam_role_policy" "instance" {
#   name   = "${var.project_prefix}-instance-policy"
#   role   = "${aws_iam_role.instance.name}"
#   policy = "${data.template_file.instance_profile.rendered}"
# }
